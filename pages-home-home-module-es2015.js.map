{"version":3,"sources":["./src/app/pages/home/home.component.html","./src/app/pages/home/home.component.scss","./src/app/pages/home/home.component.ts","./src/app/pages/home/home.module.ts","./src/app/shared/services/sfdata.service.ts"],"names":[],"mappings":"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","file":"pages-home-home-module-es2015.js","sourcesContent":["export default \"<mat-drawer-container class=\\\"sidenav-container\\\" autosize>\\n    <mat-drawer\\n        class=\\\"sidenav\\\"\\n        mode=\\\"side\\\"\\n        [opened]=\\\"sidenavOpen && mediaObserver.isActive('gt-sm')\\\"\\n    >\\n        <mat-spinner\\n            *ngIf=\\\"loading; else markerTemplate\\\"\\n            class=\\\"mx-auto my-5 d-block\\\"\\n            [diameter]=\\\"22\\\"\\n            [strokeWidth]=\\\"2\\\"\\n        ></mat-spinner>\\n    </mat-drawer>\\n\\n    <mat-drawer-content>\\n        <div class=\\\"page-container\\\">\\n            <mat-card>\\n                <mat-card-title>San Francisco Food Trucks</mat-card-title>\\n                <mat-card-subtitle>\\n                    We'll find the five closest food trucks to you in San\\n                    Francisco! To start, enable access to your device location\\n                    or click your current position in the map.\\n                </mat-card-subtitle>\\n                <mat-card-subtitle>\\n                    <strong>\\n                        The Reset button will set the map to Initial State.\\n                    </strong>\\n                </mat-card-subtitle>\\n                <mat-card-subtitle class=\\\"\\\">\\n                    <button\\n                        class=\\\"mx-2\\\"\\n                        mat-raised-button\\n                        color=\\\"primary\\\"\\n                        (click)=\\\"reset()\\\"\\n                        matTooltip=\\\"Reset map to Initial State\\\"\\n                    >\\n                        Reset\\n                    </button>\\n                    <button\\n                        class=\\\"mx-2\\\"\\n                        mat-raised-button\\n                        color=\\\"primary\\\"\\n                        (click)=\\\"findMe()\\\"\\n                        matTooltip=\\\"Use location services to find your current location\\\"\\n                    >\\n                        Find Me\\n                    </button>\\n                    <span class=\\\"mx-2\\\">\\n                        Latitude: {{ lat }}, Longitude: {{ lng }}\\n                    </span>\\n                    <mat-spinner\\n                        *ngIf=\\\"loading\\\"\\n                        class=\\\"mx-2\\\"\\n                        [diameter]=\\\"22\\\"\\n                        [strokeWidth]=\\\"2\\\"\\n                    ></mat-spinner>\\n                </mat-card-subtitle>\\n\\n                <mat-card-content>\\n                    <agm-map\\n                        [latitude]=\\\"lat\\\"\\n                        [longitude]=\\\"lng\\\"\\n                        [(zoom)]=\\\"zoom\\\"\\n                        [usePanning]=\\\"true\\\"\\n                        [clickableIcons]=\\\"false\\\"\\n                        (mapClick)=\\\"mapClicked($event)\\\"\\n                    >\\n                        <ng-container *ngIf=\\\"markers$ | async as markers\\\">\\n                            <agm-marker\\n                                *ngFor=\\\"let m of markers\\\"\\n                                (markerClick)=\\\"markerClicked(m)\\\"\\n                                [latitude]=\\\"m.latitude\\\"\\n                                [longitude]=\\\"m.longitude\\\"\\n                                [label]=\\\"m.label\\\"\\n                            >\\n                                <agm-info-window\\n                                    [isOpen]=\\\"infoWindow === m.objectid\\\"\\n                                >\\n                                    <strong>{{ m.applicant }}</strong>\\n                                    <p>{{ m.address }}</p>\\n                                </agm-info-window>\\n                            </agm-marker>\\n                        </ng-container>\\n\\n                        <agm-circle\\n                            *ngIf=\\\"radius\\\"\\n                            [latitude]=\\\"lat\\\"\\n                            [longitude]=\\\"lng\\\"\\n                            [radius]=\\\"radius\\\"\\n                            [clickable]=\\\"false\\\"\\n                            [fillColor]=\\\"'blue'\\\"\\n                            [fillOpacity]=\\\"0.2\\\"\\n                        ></agm-circle>\\n                    </agm-map>\\n                </mat-card-content>\\n            </mat-card>\\n            <div\\n                *ngIf=\\\"mediaObserver.isActive('lt-md'); then markerTemplate\\\"\\n            ></div>\\n        </div>\\n    </mat-drawer-content>\\n</mat-drawer-container>\\n\\n<ng-template #markerTemplate>\\n    <ng-container *ngIf=\\\"markers$ | async as markers\\\">\\n        <div *ngFor=\\\"let m of markers\\\" class=\\\"sidenav\\\">\\n            <div\\n                (click)=\\\"markerClicked(m)\\\"\\n                class=\\\"p-2 {{ m === selectedMarker ? 'bg-secondary' : '' }}\\\"\\n            >\\n                <mat-card>\\n                    <mat-card-title>\\n                        {{ m.label }})\\n                        {{ m.applicant }}\\n                    </mat-card-title>\\n                    <mat-card-subtitle>\\n                        {{ m.address }}\\n                    </mat-card-subtitle>\\n                    <mat-card-content>\\n                        <strong>Distance:</strong>\\n                        {{ m.miles }} miles\\n                    </mat-card-content>\\n                    <mat-card-actions>\\n                        <a\\n                            class=\\\"text-primary\\\"\\n                            target=\\\"_blank\\\"\\n                            href=\\\"https://www.google.com/maps/dir/?api=1&origin={{\\n                                lat\\n                            }},{{ lng }}&destination={{ m.latitude }},{{\\n                                m.longitude\\n                            }}\\\"\\n                        >\\n                            Click for Directions\\n                        </a>\\n                    </mat-card-actions>\\n                </mat-card>\\n            </div>\\n        </div>\\n    </ng-container>\\n</ng-template>\\n\"","export default \":host {\\n  display: flex;\\n  flex: 1;\\n}\\n\\n.page-container {\\n  margin: 1em 0;\\n}\\n\\nagm-map {\\n  height: 600px;\\n}\\n\\n.mat-progress-spinner {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n\\nmat-drawer-container {\\n  flex: 1;\\n}\\n\\nmat-drawer-container mat-drawer.sidenav {\\n  width: 300px;\\n}\\n\\n.sidenav mat-card {\\n  margin: 0.5em;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWlzL2Rldi9mb29kLXRydWNrLWNoYWxsZW5nZS9zcmMvYXBwL3BhZ2VzL2hvbWUvaG9tZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvaG9tZS9ob21lLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLE9BQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7QUNDSjs7QURHQTtFQUNJLGFBQUE7QUNBSjs7QURHQTtFQUNJLHFCQUFBO0VBQ0Esc0JBQUE7QUNBSjs7QURHQTtFQUNJLE9BQUE7QUNBSjs7QURDSTtFQUNJLFlBQUE7QUNDUjs7QURJSTtFQUNJLGFBQUE7QUNEUiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2hvbWUvaG9tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXg6IDE7XG59XG5cbi5wYWdlLWNvbnRhaW5lciB7XG4gICAgbWFyZ2luOiAxZW0gMDtcbiAgICAvLyBoZWlnaHQ6IDEwMCU7XG59XG5cbmFnbS1tYXAge1xuICAgIGhlaWdodDogNjAwcHg7XG59XG5cbi5tYXQtcHJvZ3Jlc3Mtc3Bpbm5lciB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbm1hdC1kcmF3ZXItY29udGFpbmVyIHtcbiAgICBmbGV4OiAxO1xuICAgIG1hdC1kcmF3ZXIuc2lkZW5hdiB7XG4gICAgICAgIHdpZHRoOiAzMDBweDtcbiAgICB9XG59XG5cbi5zaWRlbmF2IHtcbiAgICBtYXQtY2FyZCB7XG4gICAgICAgIG1hcmdpbjogMC41ZW07XG4gICAgfVxufVxuIiwiOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4OiAxO1xufVxuXG4ucGFnZS1jb250YWluZXIge1xuICBtYXJnaW46IDFlbSAwO1xufVxuXG5hZ20tbWFwIHtcbiAgaGVpZ2h0OiA2MDBweDtcbn1cblxuLm1hdC1wcm9ncmVzcy1zcGlubmVyIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG5tYXQtZHJhd2VyLWNvbnRhaW5lciB7XG4gIGZsZXg6IDE7XG59XG5tYXQtZHJhd2VyLWNvbnRhaW5lciBtYXQtZHJhd2VyLnNpZGVuYXYge1xuICB3aWR0aDogMzAwcHg7XG59XG5cbi5zaWRlbmF2IG1hdC1jYXJkIHtcbiAgbWFyZ2luOiAwLjVlbTtcbn0iXX0= */\"","import { MouseEvent } from '@agm/core';\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { MediaChange, MediaObserver } from '@angular/flex-layout';\nimport { SFDataService } from '@app/shared/services/sfdata.service';\nimport { Observable, of } from 'rxjs';\nimport { finalize, shareReplay, tap } from 'rxjs/operators';\n@Component({\n    selector: 'ftc-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n    // Map zoom level\n    zoom: number;\n\n    // Map center position\n    lat: number;\n    lng: number;\n\n    // Map circle area for found results\n    radius: number;\n\n    // Keep track of currently displayed marker details\n    infoWindow: string;\n\n    // Map markers for the closest food trucks\n    markers$: Observable<any>;\n\n    // Loading indicator while querying food truck details\n    loading: boolean;\n\n    // Open sidenav\n    sidenavOpen: boolean;\n\n    // Keep track of selected marker\n    selectedMarker;\n\n    mediaObserver$: Observable<\n        MediaChange[]\n    > = this.mediaObserver.asObservable();\n\n    constructor(\n        public mediaObserver: MediaObserver,\n        private sfDataService: SFDataService,\n        private cdRef: ChangeDetectorRef\n    ) {\n        // initialize map values\n        this.reset();\n    }\n\n    // resets map values to initial defaults\n    reset() {\n        // San Francisco latitude/longitude\n        this.lat = 37.75923216518026;\n        this.lng = -122.42079955329393;\n        this.zoom = 12;\n        this.radius = 0;\n        this.sidenavOpen = false;\n        this.markers$ = of([]);\n    }\n\n    // Runs on selection of a map marker\n    markerClicked(marker) {\n        // Sets the marker as selected/unselected\n        if (this.selectedMarker === marker) {\n            this.selectedMarker = null;\n            this.infoWindow = null;\n        } else {\n            this.selectedMarker = marker;\n            this.infoWindow = marker.objectid;\n        }\n    }\n\n    // Runs on map click\n    mapClicked($event: MouseEvent) {\n        // Resets values\n        this.selectedMarker = null;\n        this.radius = 0;\n\n        // Update location based on map click location\n        this.lat = $event.coords.lat;\n        this.lng = $event.coords.lng;\n\n        // Find food trucks based on new latitude/longitude\n        this.findNearbyFoodTrucks();\n    }\n\n    // Use Device location as initial map location\n    findMe() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.lat = position.coords.latitude;\n                this.lng = position.coords.longitude;\n                this.cdRef.detectChanges();\n            });\n        } else {\n            alert('Geolocation is not supported by this browser.');\n        }\n    }\n\n    // Finds the five closest food trucks for the current latitude/longitude\n    findNearbyFoodTrucks() {\n        // Start loading indicator\n        this.loading = true;\n        this.sidenavOpen = true;\n\n        // Build SoQL query string for Socrata API to return the 5 closest food trucks to a given location\n        const params = {\n            // Order results based on proximity to current latitude/longitude\n            $order: `distance_in_meters(location, 'POINT (${this.lng} ${this.lat})')`,\n            // Limit to 5 results (5 closest to given location)\n            $limit: 5,\n            // Add `range` field to response for later use\n            $select: `*, distance_in_meters(location, 'POINT (${this.lng} ${this.lat})') AS range`\n        };\n\n        this.markers$ = this.sfDataService.getFoodTruckData(params).pipe(\n            // Prevent unnecessary repeated requests\n            shareReplay(1),\n            tap(data => {\n                data.forEach((m, i) => {\n                    // Zoom in to selected area\n                    this.zoom = 14;\n\n                    // Set marker label to a uppercase letter based on the index (index `0` = label `A`)\n                    m.label = String.fromCharCode(65 + i);\n\n                    // Set circle area radius to the furthest food truck found (add padding for map visual)\n                    const radius = Number(m.range) + 20;\n                    if (radius > this.radius) {\n                        this.radius = radius;\n                    }\n\n                    // Divide by 1609.344 to convert to miles\n                    m.miles = (parseFloat(m.range) / 1609.34).toFixed(3);\n                });\n            }),\n            finalize(() => {\n                // Stop loading indicator\n                this.loading = false;\n            })\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@app/shared';\nimport { HomeComponent } from './home.component';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: HomeComponent\n            }\n        ])\n    ],\n    declarations: [HomeComponent]\n})\nexport class HomeModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SFDataService {\n    dataUrl = 'https://data.sfgov.org/resource/rqzj-sfat.json';\n\n    constructor(private http: HttpClient) {}\n\n    getFoodTruckData(params?): Observable<any> {\n        return this.http.get(this.dataUrl, { params });\n    }\n}\n"],"sourceRoot":"webpack:///"}