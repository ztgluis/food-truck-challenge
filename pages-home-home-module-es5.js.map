{"version":3,"sources":["src/app/pages/home/home.component.html","src/app/pages/home/home.component.scss","src/app/pages/home/home.component.ts","src/app/pages/home/home.module.ts","src/app/shared/services/sfdata.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<mat-drawer-container class=\\\"sidenav-container\\\" autosize>\\n    <mat-drawer\\n        class=\\\"sidenav\\\"\\n        mode=\\\"side\\\"\\n        [opened]=\\\"sidenavOpen && mediaObserver.isActive('gt-sm')\\\"\\n    >\\n        <mat-spinner\\n            *ngIf=\\\"loading; else markerTemplate\\\"\\n            class=\\\"mx-auto my-5 d-block\\\"\\n            [diameter]=\\\"22\\\"\\n            [strokeWidth]=\\\"2\\\"\\n        ></mat-spinner>\\n    </mat-drawer>\\n\\n    <mat-drawer-content>\\n        <div class=\\\"page-container\\\">\\n            <mat-card>\\n                <mat-card-title>San Francisco Food Trucks</mat-card-title>\\n                <mat-card-subtitle>\\n                    We'll find the five closest food trucks to you in San\\n                    Francisco! To start, enable access to your device location\\n                    or click your current position in the map.\\n                </mat-card-subtitle>\\n                <mat-card-subtitle>\\n                    <strong>\\n                        The Reset button will set the map to Initial State.\\n                    </strong>\\n                </mat-card-subtitle>\\n                <mat-card-subtitle class=\\\"\\\">\\n                    <button\\n                        class=\\\"mx-2\\\"\\n                        mat-raised-button\\n                        color=\\\"primary\\\"\\n                        (click)=\\\"reset()\\\"\\n                        matTooltip=\\\"Reset map to Initial State\\\"\\n                    >\\n                        Reset\\n                    </button>\\n                    <button\\n                        class=\\\"mx-2\\\"\\n                        mat-raised-button\\n                        color=\\\"primary\\\"\\n                        (click)=\\\"findMe()\\\"\\n                        matTooltip=\\\"Use location services to find your current location\\\"\\n                    >\\n                        Find Me\\n                    </button>\\n                    <span class=\\\"mx-2\\\">\\n                        Latitude: {{ lat }}, Longitude: {{ lng }}\\n                    </span>\\n                    <mat-spinner\\n                        *ngIf=\\\"loading\\\"\\n                        class=\\\"mx-2\\\"\\n                        [diameter]=\\\"22\\\"\\n                        [strokeWidth]=\\\"2\\\"\\n                    ></mat-spinner>\\n                </mat-card-subtitle>\\n\\n                <mat-card-content>\\n                    <agm-map\\n                        [latitude]=\\\"lat\\\"\\n                        [longitude]=\\\"lng\\\"\\n                        [(zoom)]=\\\"zoom\\\"\\n                        [usePanning]=\\\"true\\\"\\n                        [clickableIcons]=\\\"false\\\"\\n                        (mapClick)=\\\"mapClicked($event)\\\"\\n                    >\\n                        <ng-container *ngIf=\\\"markers$ | async as markers\\\">\\n                            <agm-marker\\n                                *ngFor=\\\"let m of markers\\\"\\n                                (markerClick)=\\\"markerClicked(m)\\\"\\n                                [latitude]=\\\"m.latitude\\\"\\n                                [longitude]=\\\"m.longitude\\\"\\n                                [label]=\\\"m.label\\\"\\n                            >\\n                                <agm-info-window\\n                                    [isOpen]=\\\"infoWindow === m.objectid\\\"\\n                                >\\n                                    <strong>{{ m.applicant }}</strong>\\n                                    <p>{{ m.address }}</p>\\n                                </agm-info-window>\\n                            </agm-marker>\\n                        </ng-container>\\n\\n                        <agm-circle\\n                            *ngIf=\\\"radius\\\"\\n                            [latitude]=\\\"lat\\\"\\n                            [longitude]=\\\"lng\\\"\\n                            [radius]=\\\"radius\\\"\\n                            [clickable]=\\\"false\\\"\\n                            [fillColor]=\\\"'blue'\\\"\\n                            [fillOpacity]=\\\"0.2\\\"\\n                        ></agm-circle>\\n                    </agm-map>\\n                </mat-card-content>\\n            </mat-card>\\n            <div\\n                *ngIf=\\\"mediaObserver.isActive('lt-md'); then markerTemplate\\\"\\n            ></div>\\n        </div>\\n    </mat-drawer-content>\\n</mat-drawer-container>\\n\\n<ng-template #markerTemplate>\\n    <ng-container *ngIf=\\\"markers$ | async as markers\\\">\\n        <div *ngFor=\\\"let m of markers\\\" class=\\\"sidenav\\\">\\n            <div\\n                (click)=\\\"markerClicked(m)\\\"\\n                class=\\\"p-2 {{ m === selectedMarker ? 'bg-secondary' : '' }}\\\"\\n            >\\n                <mat-card>\\n                    <mat-card-title>\\n                        {{ m.label }})\\n                        {{ m.applicant }}\\n                    </mat-card-title>\\n                    <mat-card-subtitle>\\n                        {{ m.address }}\\n                    </mat-card-subtitle>\\n                    <mat-card-content>\\n                        <strong>Distance:</strong>\\n                        {{ m.miles }} miles\\n                    </mat-card-content>\\n                    <mat-card-actions>\\n                        <a\\n                            class=\\\"text-primary\\\"\\n                            target=\\\"_blank\\\"\\n                            href=\\\"https://www.google.com/maps/dir/?api=1&origin={{\\n                                lat\\n                            }},{{ lng }}&destination={{ m.latitude }},{{\\n                                m.longitude\\n                            }}\\\"\\n                        >\\n                            Click for Directions\\n                        </a>\\n                    </mat-card-actions>\\n                </mat-card>\\n            </div>\\n        </div>\\n    </ng-container>\\n</ng-template>\\n\"","export default \":host {\\n  display: flex;\\n  flex: 1;\\n}\\n\\n.page-container {\\n  margin: 1em 0;\\n}\\n\\nagm-map {\\n  height: 600px;\\n}\\n\\n.mat-progress-spinner {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n\\nmat-drawer-container {\\n  flex: 1;\\n}\\n\\nmat-drawer-container mat-drawer.sidenav {\\n  width: 300px;\\n}\\n\\n.sidenav mat-card {\\n  margin: 0.5em;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWlzL2Rldi9mb29kLXRydWNrLWNoYWxsZW5nZS9zcmMvYXBwL3BhZ2VzL2hvbWUvaG9tZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvaG9tZS9ob21lLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLE9BQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7QUNDSjs7QURHQTtFQUNJLGFBQUE7QUNBSjs7QURHQTtFQUNJLHFCQUFBO0VBQ0Esc0JBQUE7QUNBSjs7QURHQTtFQUNJLE9BQUE7QUNBSjs7QURDSTtFQUNJLFlBQUE7QUNDUjs7QURJSTtFQUNJLGFBQUE7QUNEUiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2hvbWUvaG9tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXg6IDE7XG59XG5cbi5wYWdlLWNvbnRhaW5lciB7XG4gICAgbWFyZ2luOiAxZW0gMDtcbiAgICAvLyBoZWlnaHQ6IDEwMCU7XG59XG5cbmFnbS1tYXAge1xuICAgIGhlaWdodDogNjAwcHg7XG59XG5cbi5tYXQtcHJvZ3Jlc3Mtc3Bpbm5lciB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbm1hdC1kcmF3ZXItY29udGFpbmVyIHtcbiAgICBmbGV4OiAxO1xuICAgIG1hdC1kcmF3ZXIuc2lkZW5hdiB7XG4gICAgICAgIHdpZHRoOiAzMDBweDtcbiAgICB9XG59XG5cbi5zaWRlbmF2IHtcbiAgICBtYXQtY2FyZCB7XG4gICAgICAgIG1hcmdpbjogMC41ZW07XG4gICAgfVxufVxuIiwiOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4OiAxO1xufVxuXG4ucGFnZS1jb250YWluZXIge1xuICBtYXJnaW46IDFlbSAwO1xufVxuXG5hZ20tbWFwIHtcbiAgaGVpZ2h0OiA2MDBweDtcbn1cblxuLm1hdC1wcm9ncmVzcy1zcGlubmVyIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG5tYXQtZHJhd2VyLWNvbnRhaW5lciB7XG4gIGZsZXg6IDE7XG59XG5tYXQtZHJhd2VyLWNvbnRhaW5lciBtYXQtZHJhd2VyLnNpZGVuYXYge1xuICB3aWR0aDogMzAwcHg7XG59XG5cbi5zaWRlbmF2IG1hdC1jYXJkIHtcbiAgbWFyZ2luOiAwLjVlbTtcbn0iXX0= */\"","import { MouseEvent } from '@agm/core';\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { MediaChange, MediaObserver } from '@angular/flex-layout';\nimport { SFDataService } from '@app/shared/services/sfdata.service';\nimport { Observable, of } from 'rxjs';\nimport { finalize, shareReplay, tap } from 'rxjs/operators';\n@Component({\n    selector: 'ftc-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n    // Map zoom level\n    zoom: number;\n\n    // Map center position\n    lat: number;\n    lng: number;\n\n    // Map circle area for found results\n    radius: number;\n\n    // Keep track of currently displayed marker details\n    infoWindow: string;\n\n    // Map markers for the closest food trucks\n    markers$: Observable<any>;\n\n    // Loading indicator while querying food truck details\n    loading: boolean;\n\n    // Open sidenav\n    sidenavOpen: boolean;\n\n    // Keep track of selected marker\n    selectedMarker;\n\n    mediaObserver$: Observable<\n        MediaChange[]\n    > = this.mediaObserver.asObservable();\n\n    constructor(\n        public mediaObserver: MediaObserver,\n        private sfDataService: SFDataService,\n        private cdRef: ChangeDetectorRef\n    ) {\n        // initialize map values\n        this.reset();\n    }\n\n    // resets map values to initial defaults\n    reset() {\n        // San Francisco latitude/longitude\n        this.lat = 37.75923216518026;\n        this.lng = -122.42079955329393;\n        this.zoom = 12;\n        this.radius = 0;\n        this.sidenavOpen = false;\n        this.markers$ = of([]);\n    }\n\n    // Runs on selection of a map marker\n    markerClicked(marker) {\n        // Sets the marker as selected/unselected\n        if (this.selectedMarker === marker) {\n            this.selectedMarker = null;\n            this.infoWindow = null;\n        } else {\n            this.selectedMarker = marker;\n            this.infoWindow = marker.objectid;\n        }\n    }\n\n    // Runs on map click\n    mapClicked($event: MouseEvent) {\n        // Resets values\n        this.selectedMarker = null;\n        this.radius = 0;\n\n        // Update location based on map click location\n        this.lat = $event.coords.lat;\n        this.lng = $event.coords.lng;\n\n        // Find food trucks based on new latitude/longitude\n        this.findNearbyFoodTrucks();\n    }\n\n    // Use Device location as initial map location\n    findMe() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.lat = position.coords.latitude;\n                this.lng = position.coords.longitude;\n                this.cdRef.detectChanges();\n            });\n        } else {\n            alert('Geolocation is not supported by this browser.');\n        }\n    }\n\n    // Finds the five closest food trucks for the current latitude/longitude\n    findNearbyFoodTrucks() {\n        // Start loading indicator\n        this.loading = true;\n        this.sidenavOpen = true;\n\n        // Build SoQL query string for Socrata API to return the 5 closest food trucks to a given location\n        const params = {\n            // Order results based on proximity to current latitude/longitude\n            $order: `distance_in_meters(location, 'POINT (${this.lng} ${this.lat})')`,\n            // Limit to 5 results (5 closest to given location)\n            $limit: 5,\n            // Add `range` field to response for later use\n            $select: `*, distance_in_meters(location, 'POINT (${this.lng} ${this.lat})') AS range`\n        };\n\n        this.markers$ = this.sfDataService.getFoodTruckData(params).pipe(\n            // Prevent unnecessary repeated requests\n            shareReplay(1),\n            tap(data => {\n                data.forEach((m, i) => {\n                    // Zoom in to selected area\n                    this.zoom = 14;\n\n                    // Set marker label to a uppercase letter based on the index (index `0` = label `A`)\n                    m.label = String.fromCharCode(65 + i);\n\n                    // Set circle area radius to the furthest food truck found (add padding for map visual)\n                    const radius = Number(m.range) + 20;\n                    if (radius > this.radius) {\n                        this.radius = radius;\n                    }\n\n                    // Divide by 1609.344 to convert to miles\n                    m.miles = (parseFloat(m.range) / 1609.34).toFixed(3);\n                });\n            }),\n            finalize(() => {\n                // Stop loading indicator\n                this.loading = false;\n            })\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@app/shared';\nimport { HomeComponent } from './home.component';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: HomeComponent\n            }\n        ])\n    ],\n    declarations: [HomeComponent]\n})\nexport class HomeModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SFDataService {\n    dataUrl = 'https://data.sfgov.org/resource/rqzj-sfat.json';\n\n    constructor(private http: HttpClient) {}\n\n    getFoodTruckData(params?): Observable<any> {\n        return this.http.get(this.dataUrl, { params });\n    }\n}\n"],"sourceRoot":"webpack:///"}